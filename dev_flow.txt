A reducer is a function that updates state

We are setting up a backend API with Node.js and MongoDB

We want to use our own node server with mongodb
In the backend, we'll validate our user token using firebase admin so the app is secure. 
Once we implement firebase admin in the backend, when a user registers or logs in we will create or update the user in mongodb. 

Then we'll tweek login/register so that when a user logs in, the response is from the backend. 
============================================================================
Backend dependencies:
express
body-parser
mongoose
cors
morgan 
express-jwt
firebase-admin
jsonwebtoken
nodemon
dotenv

The Backend dev flow in the server.js file
1. Import all your packages with require()
2. Run the app with express()
3. Connect to the db with mongoose.connect()
4. Setup your middleware with app.use()
5. Set up your routes with app.get()
6. Set up your port with the const port = process.env.PORT and app.listen()
=================================================================================

Firebase admin - VID 36
When the user logs in in the front end, their information is saved to firebase. 
We need to retrieve that information in the backend. 
We need to receive the user 'token' and send it from front to back end. 

Two things must be done:
1. Verify that the token is valid
2. Access the user info from firebase using that token. 

Once we do this the user info can be saved in the mongoDB database. 
Firebase admin is the tool that gets this done. 

STEPS
1. Go to firebase console, project setting, service accounts
2. Click 'generate private key'
3. Save that .json file to a backend folder 'config' and name it fb-service-account-key
4. Back in the firebase console, copy the 'firebase admin sdk'.
   Save it to a backend folder 'firebase' in a file called index.js
   In the var serviceAccount, save the access key config file in the require() field

NOW we can use the firebase admin tool to verify the user JWT
=================================================================================
MiddleWare - VID 37
- When the frontend sends the user token to the backend, it will be received in the routes folder
- in the auth.js file, the router.get(create or update user)
- Change the method from GET to POST because we will be posting from front to backend from that route
- The data we will be posting will be the user JWT
- To grab that token we need another middleware function
- Remember in the post request we had a control method that returns the data from controllers/auth.js file
- between the post request and the backend response, we need to add a middleware function to validate the token

  We're putting the middleware into a new backend folder aptly titled 'middleware'

- There, create an auth.js file (in the middleware folder)
- create an admin constant requiring firebase
- In the firebase folder we have the index.js file with the initializeApp method
  being called on the var admin requiring firebase-admin

- In the middleware auth.js folder
  create an export, he calls it authcheck exports.authcheck
  It's a function
  At the moment we are logging req.headers to the dev console
  Because this is where the auth token will be sent
  Now the authCheck function will be used as the middleware in the backend routes

- In the ROUTES folder, in auth.js
  Above the controllers, add a section for middleware
  import authCheck as const { authCheck } requiring ../middleware/auth
  Now it can be added to the router.post request between the route and the controllers
  But wait...
  Go back to middleware/auth in exports.auth and add arguments (req,res,next)
   - Remember in middleware the third argument next tells program to proceed to the next argument

  NOTE: next() is called IN the middleware function
==============================================================================  
VID 38 - Auth Check MiddleWare
==============================================================================
- Our goal here is to send the usertoken from the frontend to
  the creae-or-update-user api endpoint
- First we want to set up the api URL as an env variable IN THE frontend
  Go to the frontend env
  connect the backend api endpoint 'http://localhost:8000/api' to a an env
  variable called REACT_APP_API
- Remember that what we are doing is taking user login and register info from 
  firebase admin and sending it to OUR local backend.
- This user info is submitted in the frontend pages/auth/login file. GO. 
- install and import axios in the frontend
- using axios we want to execute a funtion that will make a request to
  our local backend with the token in the submitHandler
- We want to do this before we dispatch our login action
- It will be called in the submitHandler but we will declare it globally
  below the imports
- Remember, in the backend, we had a controller that was returnig a response
  from the local server to the frontend
  Now, in the front end, we are connectin the two, essentially. 
  - Declare an async function called createOrUpdateUser (if you use {}, use a return statement)
  - we return an await post request to our backend api
  - we do this using the process.env variable 
      The url endpoint is the first argument
  - The second argument is the request body
    but here we aren't sending any data in the req.body so we can leave and empty object
    remember, we're sending the token in the headers, this is why the body is empty
  - The third argument is a nested object. Here we send the headers object
    The key:value is authToken, they're the same. 
    This value authToken is also passed in as an argument to the function

 - Okay now we have declared the function that will make the request to the backend
   with the token. 
 - We need to call it in the submitHandler before the action is dispatched. 

 - call the function passing idTokenResult as argument. 

 NOTE: When you declare a function you define a parameter
       When you call a function you pass an argument

 - Remember the idTokenResult is a firebase object with a key:value of
   token: 'string'. This string is the JWT token
 - The function we just created will send this JWT token:string 
   back to the server in the form of authToken in the headers

 - Since it returns a promise we can use .then() and .catch()

 - Now we can make this authtoken available in our controller

 ====================================================================
 Vid 39 - Creating or Updating the User from fbase in our mongo cluster
 ====================================================================
- We have the token in our backend. 
- We're going to continue working on the middleware, which uses
  firebase to verify the token to make sure that it is valid. 
- in the backend middleware/auth file....
- remove the console log and set up a try catch, 
  run a custom error message in a json object with a res status of 401
- We verify the token with a firebase method called verifyIdToken in order to 
  get what is called a uid

https://firebase.google.com/docs/auth/admin/verify-id-tokens

- We are going to create a function containing the uid that runs this verifyIdToken method
- const firebaseUser or whatever
- make the authcheck function async
- console log it to take a look 
- Remember this is a middleware function making the user info from firebase available
  to the controller so that it can be available in our mongodb database
- One way to do that is do make the info contained in the firebaseuser const
  available in the authCheck req object
- req.user = firebaseUser
- Now it's available in the controller. GO. 

//Controller
- Import the user model from models in the c
- The user object from firebase was huge. 
- We're going to take the name, picture and email 
- create a destructured constant of name, picture and email from req.user

- Now we need to decide whether we are going to create or update. 
- We need to check if a user already exists, if they do, 
  we're not creating again, but updating. 
  https://mongoosejs.com/docs/tutorials/findoneandupdate.html

- The first argument of findoneandupdate is the filter, the thing by which
  we are going to locate the thing we want to update. Here, it is email.
- The second argument is the thing which we are going to update. Here, it's
  the picture and name. 
- the {new:true} argument returns the updated info
- so now the updated info, called on the mongoose User model is avaiable in 
  the const = user variable. 

- Next is an if statement that checks to see if a user already exists
  if it exists... the res.json... passes the user var with the updated infoo...
- The else statment creates a new user using the user constructor from the models folder
- The user model is saved in a const and has an object passed into it.
    - The key:val are whatever we want the user object to be made up of...
    - if the key:val are the same then {key} syntax is cool. 
- Call the save() method on the new User constructor to put it in the DB. 
- Finally send the response res.json() and pass the newUser const into it. 


=========================================================================
40 - API response
- Now we are getting the user credentials from our own server
  using the createOrUpdateUser method we created. 
- Now we can dispatch the user info to our redux store
  in this method (remove the console log and put the dispatch function in the response )
- In the dispatch payload, enter in all the key:vals from the mongoose user model.

- At this point we only have the user info from firebase. Not from our own backend.
  We need to connect with our backend's API endpoint. 
- We will make reference to our backend API in the App.js useEffect. 
- From Login.js we are manually updating the redux state
- But whenever there is any change to the page, like a refresh, etc. 
  useEffect will run. 

- Now go to Google login and replace the dispatch with the createOrUpdateUser fuctions
- In register complete, we need to do the same thing
  We need to import usedispatch and use selector
  To access user from the state, copy the destructured user const into reg complete
  Import it (the const) above the useeffect underneat the other consts
  copy over the createOrUpdateUser

- Saving the user by their name in the backend...
  In the header component, we have saved the user name via user.email
  In controller auth.js, when we create a new user, 
  in the name key:val, add the email.split('@')[0] as the val

--Now, we are going to put all of the functions related to making requests
  to our server in a new folder, creating and updating products and categories, etc
- Create a foler in src called functions
- create a file, auth.js
- import axios
- add the createOrUpdateUser const, but export it... export const, etc. 
- Remember, we are in the frontend, so this is the part of the program 
  where the front talks to the back. 
- Now, in the login page we can import {}

===============================================================================
41 - Current User endpoint

So now when we login or register we get a response from our own backend. 
BUT BUT BUT. 
Whenever there is any state change to the page, that info is lost, and we are left
with only user email and token. 
That's because in the App.js useEffect hook, which manages state change, as of now,
it is communicating with firebase, not our server. 
- What we can do is create a new API endpoint in our backend that gives us the 
  currently logged in user. 
- We need to create the endpoint in our backend
- In backend/routes/auth - 
    - Create a new post request /current-user, returning a function called
      currentUser that gives us the currently logged in user. 
- In controllers - 
    - create an exports.currentUser
    
    Where does the user email info come from?
    Remember, in the endpoint, before the currentUser function fires,
    the authcheck middleware is called. 
    If you check there, you will find the info stored in firebase, line 10. 

    - the currentUser calls the findOne method from mongoose on our User model:
      User.findOne
    - pass in an object with a key:val email: req.user.email, the info That
      is stored in firebase
    - Then call the .exec() method, it takes a callback with paramaters err, user
    - In the function body
        we need an if statement that throws a new error if there is one
        otherwise send the res.json response(user)

    Now we need to export it from the functions folder in the frontend
    Create a new function there 
    name it current user and edit the endpoint to current-user

    Now we need to import it in App.js
    import it at the top
    Replace the dipatch method with the createOrUpdateUser function

======================================================================
42 Role Base Redirect

Where do we go when we login?
It depends on who you are.

Go to Login and below the imports create a function called
roleBasedRedirect that takes (res) as an argument
In the body put an if statment that res.data.role === 'admin'
put it after let dispatch in the useEffect

=====================================================================

43 Protected Routes

- So once the user logs in they're directed to user/history.
- We need to make it to where only they can access that page. 
- The route needs 'protection' lol. 
- Frontend/pages, create a new folder for user-related routes called 'user' 
- Create a History.js file
- import History in App.js

- In components folder, create a new folder called routes
- create a new file called UserRoute.js
- create an exportable function called UserRoute
- pass in the children props deconstructed {children ...rest}

- First we are going to access the user from state
- In the fuction body create a const whose value is the user object
- This const is the useSelector function with state passed in as an argument
- in the body, we will return state using the spread operator

https://reactrouter.com/native/example/auth-workflow

- we're going to return the user and the user token. 
- If we have the user in the state, we want to return the route with the rest of the
  props and the children.
- Otherwise we show loading

- So now we have this user route that has this protection in it. 
- We can use it to protect all of the user routes. 
- Import it in App.js
- Now, instead of <Route />, we can use <UserRoute />

==============================================================================
44 - Redirect countdown
- In the new routes folder
- create a component called LoadingToRedirect.js
- create a rafce
- import the useHistory hook from react-router-dom
- the state will be [count, setCount] = useState(5)
- Whenever the count changes, useEffect will run. 
- When it runs, it will decrement the count from the state
- in the function body, call useEffect with [count] as a dependency
- call setInterval in a const called interval

- Import LoadingToRedirect in UserRoute




  




